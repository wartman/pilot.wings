// Generated by Haxe 4.0.0-rc.3+e3df7a448
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
var Test = function() { };
Test.__name__ = true;
Test.main = function() {
	var root = window.document.getElementById("root");
	var props = new pilot_wings_PortalTarget({ id : pilot_wings_PortalTarget.defaultTarget}).render();
	var props1 = { children : [pilot__$VNode_VNode_$Impl_$._new({ name : "test", props : { }, type : pilot_VNodeType.VNodeText, node : null})]};
	var props2 = { target : pilot_wings_PortalTarget.defaultTarget, requestClose : function() {
		console.log("example/Test.hx:15:","close plz");
		return;
	}, title : "Test", child : pilot__$VNode_VNode_$Impl_$._new({ name : "div", style : props1.style, props : { onClick : props1.onClick}, hooks : { attach : props1.onAttach, detach : props1.onDetach}, children : props1.children})};
	var props3 = props2.target == null ? pilot_wings_PortalTarget.defaultTarget : props2.target;
	var props_requestClose = props2.requestClose;
	var name = [props2.overlayStyle,"wng-overlay--modal"].filter(function(s) {
		if(s != null) {
			return s != "";
		} else {
			return false;
		}
	}).join(" ");
	var name1 = ["wng-modal-wrapper",props2.modalStyle].filter(function(s1) {
		if(s1 != null) {
			return s1 != "";
		} else {
			return false;
		}
	}).join(" ");
	var props4 = { style : name1 == "" ? null : name1, onClick : function(e) {
		e.stopPropagation();
		return;
	}, children : [props2.child]};
	var this1 = pilot__$VNode_VNode_$Impl_$._new({ name : "div", style : props4.style, props : { onClick : props4.onClick}, hooks : { attach : props4.onAttach, detach : props4.onDetach}, children : props4.children});
	var name2 = [name == "" ? null : name,"wng-overlay"].filter(function(s2) {
		if(s2 != null) {
			return s2 != "";
		} else {
			return false;
		}
	}).join(" ");
	var props11 = { style : name2 == "" ? null : name2, onClick : function(_) {
		props_requestClose();
		return;
	}, children : [this1]};
	var props5 = { target : props3, child : pilot__$VNode_VNode_$Impl_$._new({ name : "div", style : props11.style, props : { onClick : props11.onClick}, hooks : { attach : props11.onAttach, detach : props11.onDetach}, children : props11.children})};
	pilot_wings_PortalTarget.insertInto(props5.target,props5.child);
	var this2 = pilot__$VNode_VNode_$Impl_$._new({ name : "[placeholder]", props : { }, type : pilot_VNodeType.VNodePlaceholder});
	this2.hooks.attach = function(vn) {
		if(props5.onAttach != null) {
			props5.onAttach(vn);
		}
		return;
	};
	this2.hooks.detach = function() {
		pilot_wings_PortalTarget.clear(props5.target);
		if(props5.onDetach != null) {
			props5.onDetach();
		}
		return;
	};
	var props6 = { children : [props,this2]};
	pilot_Differ.patch(root,pilot__$VNode_VNode_$Impl_$._new({ name : "div", style : props6.style, props : { onClick : props6.onClick}, hooks : { attach : props6.onAttach, detach : props6.onDetach}, children : props6.children}));
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var pilot_Differ = function() { };
pilot_Differ.__name__ = true;
pilot_Differ.patch = function(node,vnode) {
	node = pilot_Differ.patchNode(node,node,Reflect.field(node,"__vnode") != null ? Reflect.field(node,"__vnode") : pilot_Differ.recycleNode(node),vnode,false);
	node["__vnode"] = vnode;
	return vnode;
};
pilot_Differ.subPatch = function(vnode,newVNode) {
	pilot_Differ.patchNode(vnode.node,vnode.node,vnode,newVNode,false);
	vnode.name = newVNode.name;
	vnode.key = newVNode.key;
	vnode.style = newVNode.style;
	vnode.props = newVNode.props;
	vnode.children = newVNode.children;
	vnode.type = newVNode.type;
	vnode.hooks = newVNode.hooks;
};
pilot_Differ.patchNode = function(parent,node,oldVNode,newVNode,isSvg) {
	if(oldVNode != null) {
		newVNode = oldVNode.hooks.willPatch != null ? oldVNode.hooks.willPatch(newVNode) : newVNode;
	}
	if(oldVNode != newVNode) {
		if(oldVNode != null && oldVNode.type == pilot_VNodeType.VNodeText && newVNode.type == pilot_VNodeType.VNodeText) {
			if(oldVNode.name != newVNode.name) {
				node.nodeValue = newVNode.name;
			}
		} else if(oldVNode == null || oldVNode.name != newVNode.name) {
			node = parent.insertBefore(pilot_Differ.createNode(newVNode,isSvg),node);
			if(oldVNode != null && oldVNode.node != null) {
				pilot_Differ.detachNode(parent,oldVNode);
			}
		} else {
			var tmpVChild;
			var oldVChild;
			var oldKey;
			var newKey;
			var oldVProps = oldVNode.props;
			var newVProps = newVNode.props;
			var oldVChildren = oldVNode.children;
			var newVChildren = newVNode.children;
			var oldHead = 0;
			var newHead = 0;
			var oldTail = oldVChildren.length - 1;
			var newTail = newVChildren.length - 1;
			isSvg = isSvg || newVNode.name == "svg";
			var access = pilot_Differ.merge(oldVProps,newVProps);
			var _g_keys = Reflect.fields(access);
			var _g_index = 0;
			while(_g_index < _g_keys.length) {
				var key = _g_keys[_g_index++];
				var k = ({ value : access[key], key : key}).key;
				switch(k) {
				case "checked":case "selected":case "value":
					if(Reflect.field(node,k) != Reflect.field(newVProps,k)) {
						pilot_Differ.patchProperty(node,k,Reflect.field(oldVProps,k),Reflect.field(newVProps,k),isSvg);
					}
					break;
				default:
					if(Reflect.field(oldVProps,k) != Reflect.field(newVProps,k)) {
						pilot_Differ.patchProperty(node,k,Reflect.field(oldVProps,k),Reflect.field(newVProps,k),isSvg);
					}
				}
			}
			while(newHead <= newTail && oldHead <= oldTail) {
				oldKey = pilot_Differ.getKey(oldVChildren[oldHead]);
				if(oldKey == null || oldKey != pilot_Differ.getKey(newVChildren[newHead])) {
					break;
				}
				pilot_Differ.patchNode(node,oldVChildren[oldHead++].node,oldVChildren[oldHead - 1],newVChildren[newHead++],isSvg);
			}
			while(newHead <= newTail && oldHead <= oldTail) {
				oldKey = pilot_Differ.getKey(oldVChildren[oldTail]);
				if(oldKey == null || oldKey != pilot_Differ.getKey(newVChildren[newTail])) {
					break;
				}
				pilot_Differ.patchNode(node,oldVChildren[oldTail--].node,oldVChildren[oldTail + 1],newVChildren[newTail--],isSvg);
			}
			if(oldHead > oldTail) {
				while(newHead <= newTail) {
					var tmp = pilot_Differ.createNode(newVChildren[newHead++],isSvg);
					oldVChild = oldVChildren[oldHead];
					node.insertBefore(tmp,oldVChild != null ? oldVChild.node : null);
				}
			} else if(newHead > newTail) {
				while(oldHead <= oldTail) pilot_Differ.detachNode(node,oldVChildren[oldHead++]);
			} else {
				var keyed = { };
				var newKeyed = { };
				var i = oldHead;
				while(i <= oldTail) {
					oldKey = oldVChildren[i].key;
					if(oldKey != null) {
						keyed[oldKey] = oldVChildren[i];
					}
					++i;
				}
				while(newHead <= newTail) {
					oldVChild = oldVChildren[oldHead];
					oldKey = pilot_Differ.getKey(oldVChild);
					newKey = pilot_Differ.getKey(newVChildren[newHead]);
					if(newKeyed[oldKey] || newKey != null && newKey == pilot_Differ.getKey(oldVChildren[oldHead + 1])) {
						if(oldKey == null) {
							pilot_Differ.detachNode(node,oldVChild);
						}
						++oldHead;
						continue;
					}
					if(newKey == null || oldVNode.type == pilot_VNodeType.VNodeRecycled) {
						if(oldKey == null) {
							pilot_Differ.patchNode(node,oldVChild != null ? oldVChild.node : null,oldVChild,newVChildren[newHead],isSvg);
							++newHead;
						}
						++oldHead;
					} else {
						if(oldKey == newKey) {
							pilot_Differ.patchNode(node,oldVChild.node,oldVChild,newVChildren[newHead],isSvg);
							newKeyed[newKey] = true;
							++oldHead;
						} else {
							tmpVChild = keyed[newKey];
							if(tmpVChild != null) {
								pilot_Differ.patchNode(node,node.insertBefore(tmpVChild.node,oldVChild != null ? oldVChild.node : null),tmpVChild,newVChildren[newHead],isSvg);
								newKeyed[newKey] = true;
							} else {
								pilot_Differ.patchNode(node,oldVChild != null ? oldVChild.node : null,null,newVChildren[newHead],isSvg);
							}
						}
						++newHead;
					}
				}
				while(oldHead <= oldTail) {
					oldVChild = oldVChildren[oldHead++];
					if(pilot_Differ.getKey(oldVChild) == null) {
						pilot_Differ.detachNode(node,oldVChild);
					}
				}
				var _g_keys1 = Reflect.fields(keyed);
				var _g_index1 = 0;
				while(_g_index1 < _g_keys1.length) {
					var key1 = _g_keys1[_g_index1++];
					var _g1 = { value : keyed[key1], key : key1};
					if(newKeyed[_g1.key] == null) {
						pilot_Differ.detachNode(node,_g1.value);
					}
				}
			}
		}
	}
	newVNode.node = node;
	return node;
};
pilot_Differ.detachNode = function(parent,vnode) {
	if(vnode.hooks.detach != null) {
		vnode.hooks.detach();
	}
	var _g = 0;
	var _g1 = vnode.children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		if(child.hooks.detach != null) {
			child.hooks.detach();
		}
		var _g2 = 0;
		var _g11 = child.children;
		while(_g2 < _g11.length) pilot_Differ.doDetachHook(_g11[_g2++]);
	}
	if(!parent.contains(vnode.node)) {
		return;
	}
	parent.removeChild(vnode.node);
};
pilot_Differ.doDetachHook = function(vnode) {
	if(vnode.hooks.detach != null) {
		vnode.hooks.detach();
	}
	var _g = 0;
	var _g1 = vnode.children;
	while(_g < _g1.length) pilot_Differ.doDetachHook(_g1[_g++]);
};
pilot_Differ.getKey = function(vnode) {
	if(vnode == null) {
		return null;
	} else {
		return vnode.key;
	}
};
pilot_Differ.merge = function(a,b) {
	var out = { };
	var access = a;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g1 = { value : access[key], key : key};
		out[_g1.key] = _g1.value;
	}
	var access1 = b;
	var _g_keys1 = Reflect.fields(access1);
	var _g_index1 = 0;
	while(_g_index1 < _g_keys1.length) {
		var key1 = _g_keys1[_g_index1++];
		var _g11 = { value : access1[key1], key : key1};
		out[_g11.key] = _g11.value;
	}
	return out;
};
pilot_Differ.recycleNode = function(node) {
	if(node.nodeType == 3) {
		return pilot__$VNode_VNode_$Impl_$._new({ name : node.nodeValue, props : { }, type : pilot_VNodeType.VNodeText, node : node});
	} else {
		var tmp = node.nodeName.toLowerCase();
		var _g = [];
		var _g1 = 0;
		var _g2 = node.childNodes;
		while(_g1 < _g2.length) _g.push(pilot_Differ.recycleNode(_g2[_g1++]));
		return pilot__$VNode_VNode_$Impl_$._new({ name : tmp, props : { }, children : _g, node : node, type : pilot_VNodeType.VNodeRecycled, key : null});
	}
};
pilot_Differ.createNode = function(vnode,isSvg) {
	var node;
	switch(vnode.type._hx_index) {
	case 0:
		node = isSvg || vnode.name == "svg" ? window.document.createElementNS("http://www.w3.org/2000/svg",vnode.name) : window.document.createElement(vnode.name);
		break;
	case 1:
		node = window.document.createTextNode(vnode.name);
		break;
	case 2:
		node = window.document.createElement(vnode.name);
		break;
	case 3:
		node = window.document.createDocumentFragment();
		break;
	case 4:
		node = window.document.createComment("");
		break;
	}
	var access = vnode.props;
	var _g1_keys = Reflect.fields(access);
	var _g1_index = 0;
	while(_g1_index < _g1_keys.length) {
		var key = _g1_keys[_g1_index++];
		var _g2 = { value : access[key], key : key};
		pilot_Differ.patchProperty(node,_g2.key,null,_g2.value,isSvg);
	}
	var _g1 = 0;
	var _g21 = vnode.children;
	while(_g1 < _g21.length) node.appendChild(pilot_Differ.createNode(_g21[_g1++],isSvg));
	vnode.node = node;
	if(vnode.hooks.attach != null && vnode.node != null) {
		vnode.hooks.attach(vnode);
	}
	return node;
};
pilot_Differ.patchProperty = function(node,key,oldValue,newValue,isSvg) {
	if(key == "key") {
		return;
	}
	if(StringTools.startsWith(key,"on")) {
		var event = HxOverrides.substr(key,2,null).toLowerCase();
		var node1 = node;
		if(Reflect.field(node1,"__listener") == null) {
			node1["__listener"] = function(event1) {
				if(Reflect.field(node1,"__handlers") == null) {
					node1["__handlers"] = { };
				}
				var cb = Reflect.field(Reflect.field(node1,"__handlers"),event1.type);
				if(cb != null) {
					cb(event1);
				}
			};
		}
		var listener = Reflect.field(node1,"__listener");
		if(Reflect.field(node,"__handlers") == null) {
			node["__handlers"] = { };
		}
		Reflect.field(node,"__handlers")[event] = newValue;
		if(newValue == null) {
			node.removeEventListener(event,listener);
		} else if(oldValue == null) {
			node.addEventListener(event,listener);
		}
	} else if(!isSvg && key != "list" && Reflect.getProperty(node,key) != null) {
		Reflect.setProperty(node,key,newValue == null ? "" : newValue);
	} else if(newValue == null || newValue == false) {
		node.removeAttribute(key);
	} else {
		if(key == "className") {
			key = "class";
		}
		if(key == "htmlFor") {
			key = "for";
		}
		node.setAttribute(key,newValue);
	}
};
var pilot_StatelessWidget = function() { };
pilot_StatelessWidget.__name__ = true;
pilot_StatelessWidget.prototype = {
	build: function() {
		return null;
	}
	,render: function() {
		var vnode = this.build();
		vnode.hooks.attach = $bind(this,this.attached);
		vnode.hooks.detach = $bind(this,this.detached);
		return vnode;
	}
	,attached: function(vnode) {
	}
	,detached: function() {
	}
};
var pilot_StyleSheet = function() {
	this.rules = [];
};
pilot_StyleSheet.__name__ = true;
pilot_StyleSheet.getInstance = function() {
	if(pilot_StyleSheet.instance == null) {
		pilot_StyleSheet.instance = new pilot_StyleSheet();
	}
	return pilot_StyleSheet.instance;
};
pilot_StyleSheet.prototype = {
	add: function(rule) {
		this.rules.push(rule);
		return rule;
	}
};
var pilot_VNodeType = $hxEnums["pilot.VNodeType"] = { __ename__ : true, __constructs__ : ["VNodeElement","VNodeText","VNodeRecycled","VNodeFragment","VNodePlaceholder"]
	,VNodeElement: {_hx_index:0,__enum__:"pilot.VNodeType",toString:$estr}
	,VNodeText: {_hx_index:1,__enum__:"pilot.VNodeType",toString:$estr}
	,VNodeRecycled: {_hx_index:2,__enum__:"pilot.VNodeType",toString:$estr}
	,VNodeFragment: {_hx_index:3,__enum__:"pilot.VNodeType",toString:$estr}
	,VNodePlaceholder: {_hx_index:4,__enum__:"pilot.VNodeType",toString:$estr}
};
var pilot__$VNode_VNode_$Impl_$ = {};
pilot__$VNode_VNode_$Impl_$.__name__ = true;
pilot__$VNode_VNode_$Impl_$._new = function(impl) {
	if(impl.type == null) {
		impl.type = pilot_VNodeType.VNodeElement;
	}
	if(impl.children == null) {
		impl.children = [];
	}
	impl.children = impl.children.filter(function(c) {
		return c != null;
	});
	if(Object.prototype.hasOwnProperty.call(impl.props,"key")) {
		impl.key = Reflect.field(impl.props,"key");
		Reflect.deleteField(impl.props,"key");
	}
	if(impl.style != null) {
		if(Object.prototype.hasOwnProperty.call(impl.props,"className")) {
			impl.props["className"] = [impl.style,Reflect.field(impl.props,"className")].join(" ");
		} else {
			impl.props["className"] = impl.style;
		}
	}
	if(impl.hooks == null) {
		impl.hooks = { };
	}
	return impl;
};
var pilot_styles__$_$E4DCW__$E4DCW_$Impl_$ = {};
pilot_styles__$_$E4DCW__$E4DCW_$Impl_$.__name__ = true;
var pilot_styles__$_$HSXAF__$HSXAF_$Impl_$ = {};
pilot_styles__$_$HSXAF__$HSXAF_$Impl_$.__name__ = true;
var pilot_styles__$_$PKPJC__$PKPJC_$Impl_$ = {};
pilot_styles__$_$PKPJC__$PKPJC_$Impl_$.__name__ = true;
var pilot_wings_PortalTarget = function(props) {
	this._pilot_props = { };
	this._pilot_props.id = props.id;
};
pilot_wings_PortalTarget.__name__ = true;
pilot_wings_PortalTarget.insertInto = function(id,vnode) {
	window.requestAnimationFrame(function(_) {
		var _this = pilot_wings_PortalTarget.portals;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = pilot_wings_PortalTarget.portals;
			pilot_Differ.subPatch(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id],vnode);
		}
		return;
	});
};
pilot_wings_PortalTarget.clear = function(id) {
	var _this = pilot_wings_PortalTarget.portals;
	if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
		var _this1 = pilot_wings_PortalTarget.portals;
		pilot_Differ.subPatch(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id],pilot__$VNode_VNode_$Impl_$._new({ name : "div", props : { }, children : []}));
	}
};
pilot_wings_PortalTarget.__super__ = pilot_StatelessWidget;
pilot_wings_PortalTarget.prototype = $extend(pilot_StatelessWidget.prototype,{
	build: function() {
		return pilot__$VNode_VNode_$Impl_$._new({ name : "div", props : { }, children : []});
	}
	,detached: function() {
		pilot_wings_PortalTarget.portals.remove(this._pilot_props.id);
	}
	,attached: function(vnode) {
		var key = this._pilot_props.id;
		var _this = pilot_wings_PortalTarget.portals;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,vnode);
		} else {
			_this.h[key] = vnode;
		}
	}
});
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if(typeof $global.$haxeUID == "undefined") $global.$haxeUID = 0;
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
pilot_styles__$_$E4DCW__$E4DCW_$Impl_$.rules = pilot_StyleSheet.getInstance().add(".wng-overlay--modal {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}");
pilot_styles__$_$HSXAF__$HSXAF_$Impl_$.rules = pilot_StyleSheet.getInstance().add(".wng-modal-wrapper {\n  background-color: #fff;\n  padding: 1.5rem;\n}");
pilot_styles__$_$PKPJC__$PKPJC_$Impl_$.rules = pilot_StyleSheet.getInstance().add(".wng-overlay {\n  position: fixed;\n  overflow-y: scroll;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}");
pilot_wings_PortalTarget.defaultTarget = "overlay";
pilot_wings_PortalTarget.portals = new haxe_ds_StringMap();
Test.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
